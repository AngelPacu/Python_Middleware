# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import worker_pb2 as worker__pb2


class WorkerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.read_csv = channel.unary_unary(
                '/WorkerService/read_csv',
                request_serializer=worker__pb2.Filepath.SerializeToString,
                response_deserializer=worker__pb2.Result.FromString,
                )
        self.maximum = channel.unary_unary(
                '/WorkerService/maximum',
                request_serializer=worker__pb2.Filepath.SerializeToString,
                response_deserializer=worker__pb2.Result.FromString,
                )
        self.minimum = channel.unary_unary(
                '/WorkerService/minimum',
                request_serializer=worker__pb2.Filepath.SerializeToString,
                response_deserializer=worker__pb2.Result.FromString,
                )


class WorkerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def read_csv(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def maximum(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def minimum(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WorkerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'read_csv': grpc.unary_unary_rpc_method_handler(
                    servicer.read_csv,
                    request_deserializer=worker__pb2.Filepath.FromString,
                    response_serializer=worker__pb2.Result.SerializeToString,
            ),
            'maximum': grpc.unary_unary_rpc_method_handler(
                    servicer.maximum,
                    request_deserializer=worker__pb2.Filepath.FromString,
                    response_serializer=worker__pb2.Result.SerializeToString,
            ),
            'minimum': grpc.unary_unary_rpc_method_handler(
                    servicer.minimum,
                    request_deserializer=worker__pb2.Filepath.FromString,
                    response_serializer=worker__pb2.Result.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'WorkerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WorkerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def read_csv(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/WorkerService/read_csv',
            worker__pb2.Filepath.SerializeToString,
            worker__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def maximum(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/WorkerService/maximum',
            worker__pb2.Filepath.SerializeToString,
            worker__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def minimum(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/WorkerService/minimum',
            worker__pb2.Filepath.SerializeToString,
            worker__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
